[user]
	name = 
	email = 
[color]
	ui = auto
	status = auto
	diff = auto
	branch = auto
	interactive = auto
	grep = auto
[core]
	excludesfile = ~/.gitignore_global
	autocrlf = input
	editor = vim
	precomposeunicode = true
	quotepath = false
[alias]
	s = status
	b = branch
	bf = branch -f
	bfm = branch -f master origin/master
	bfd = branch -f develop origin/develop
	diffn = diff --name-only
	diffc = diff --cached
	diffp = diff --no-prefix
	diffcp = diff --cached --no-prefix
	ci = commit
	cia = commit --amend
	r  = rebase
	ri = rebase -i
	rc = rebase --continue
	ra = rebase --abort
	co = checkout
	cp = cherry-pick
	rh = reset --hard
	rhm = reset --hard origin/master
	logg = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
	logall = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  tree = log --graph --pretty='format:%C(yellow)%h%Creset %s %Cgreen(%an)%Creset %Cred%d%Creset'
	# カレントブランチをpush
	p = !git push origin `git rev-parse --abbrev-ref HEAD`
	# ローカルrefとリモートrefを比較し、ローカルが最新か判定。最新でなければpushが失敗してくれる
	pf = push --force-with-lease origin HEAD
	ru = remote update
  cb = rev-parse --abbrev-ref HEAD
  rho = !git rh origin/`git cb`
	sp = stash pop
	ss = stash save
	sl = stash list
	sa = stash apply
	# git vacuum developのように使う
	# (developにcheckoutして、ローカルのマージ済みブランチを削除する。リモートで削除されているブランチも削除する。)
	vacuum = "!f () { git checkout $1; git branch --merged|egrep -v '\\*|develop|master'|xargs git branch -d; git fetch --prune; };f"
